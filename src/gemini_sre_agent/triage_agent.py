import logging
import json
from typing import List, Dict, Any
from pydantic import BaseModel, ValidationError
from google.cloud import aiplatform
from vertexai.preview.generative_models import GenerativeModel
from tenacity import retry, stop_after_attempt, wait_exponential, retry_if_exception_type

logger = logging.getLogger(__name__)

class TriagePacket(BaseModel):
    """
    Represents a packet of information generated by the Triage Agent after analyzing logs.
    """
    issue_id: str
    initial_timestamp: str
    detected_pattern: str
    preliminary_severity_score: int
    affected_services: List[str]
    sample_log_entries: List[str]
    natural_language_summary: str

class TriageAgent:
    """
    A class responsible for triaging log entries using a Gemini model.
    """
    def __init__(self, project_id: str, location: str, triage_model: str):
        """
        Initializes the TriageAgent with GCP project, location, and the triage model to use.

        Args:
            project_id (str): The Google Cloud project ID.
            location (str): The GCP region where the model is hosted (e.g., "us-central1").
            triage_model (str): The name of the Gemini model to use for triage.
        """
        self.project_id: str = project_id
        self.location: str = location
        self.triage_model: str = triage_model
        aiplatform.init(project=project_id, location=location)
        self.model: GenerativeModel = GenerativeModel(triage_model)
        logger.info(f"TriageAgent initialized with model: {triage_model} in {location} for project: {project_id}")

    @retry(
        stop=stop_after_attempt(3),
        wait=wait_exponential(multiplier=1, min=4, max=10),
        retry=retry_if_exception_type((RuntimeError, ValueError, json.JSONDecodeError))
    )
    async def analyze_logs(self, logs: List[str]) -> TriagePacket:
        """
        Analyzes logs using the triage model and returns a TriagePacket.

        Args:
            logs (List[str]): A list of log entries to analyze.

        Returns:
            TriagePacket: A structured packet containing triage information.
        """
        logger.info(f"Analyzing {len(logs)} log entries for triage.")
        
        # Construct the prompt for the Gemini model
        prompt_template: str = """
        You are an expert SRE Triage Agent. Your task is to analyze the provided log entries, identify any critical issues, and summarize them into a structured JSON format.
        The JSON object must conform to the following schema:
        {{
            "issue_id": "A unique identifier for the issue (e.g., a UUID or a timestamp-based ID)",
            "initial_timestamp": "The timestamp of the earliest relevant log entry in ISO 8601 format",
            "detected_pattern": "A concise summary of the detected error pattern or anomaly",
            "preliminary_severity_score": "An integer score from 1 (low) to 10 (critical) indicating the preliminary severity",
            "affected_services": ["A list of service names affected by this issue"],
            "sample_log_entries": ["A list of the most relevant log entries that exemplify the issue"],
            "natural_language_summary": "A brief, human-readable summary of the issue and its potential impact"
        }}

        Analyze the following log entries:
        {log_entries}

        Provide only the JSON response.
        """
        prompt: str = prompt_template.format(log_entries="\n".join(logs))
        logger.debug(f"Prompt for triage model: {prompt[:500]}...")

        json_response_str: str = "" # Initialize json_response_str

        try:
            # Call the Gemini model (synchronous)
            response = self.model.generate_content(prompt)
            
            # Extract and parse the JSON response
            json_response_str = response.text.strip()
            logger.debug(f"Raw model response: {json_response_str[:500]}...")

            # Attempt to parse the JSON response
            triage_data: Dict[str, Any] = json.loads(json_response_str)
            triage_packet: TriagePacket = TriagePacket(**triage_data)
            
            logger.info(f"Triage analysis complete. Issue ID: {triage_packet.issue_id}")
            return triage_packet

        except ValidationError as e:
            logger.error(f"Failed to validate TriagePacket schema from model response: {e}")
            raise ValueError(f"Invalid model response schema: {e}") from e
        except json.JSONDecodeError as e:
            logger.error(f"Failed to decode JSON from model response: {e}. Response: {json_response_str}")
            raise ValueError(f"Malformed JSON response from model: {e}") from e
        except Exception as e:
            logger.error(f"Error calling Gemini Triage model: {e}")
            raise RuntimeError(f"Gemini Triage model call failed: {e}") from e